// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package boardUsers is a generated GoMock package.
package boardUsers

import (
	customType "2019_2_Shtoby_shto/src/customType"
	models "2019_2_Shtoby_shto/src/dicts/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHandlerBoardUsersService is a mock of HandlerBoardUsersService interface
type MockHandlerBoardUsersService struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerBoardUsersServiceMockRecorder
}

// MockHandlerBoardUsersServiceMockRecorder is the mock recorder for MockHandlerBoardUsersService
type MockHandlerBoardUsersServiceMockRecorder struct {
	mock *MockHandlerBoardUsersService
}

// NewMockHandlerBoardUsersService creates a new mock instance
func NewMockHandlerBoardUsersService(ctrl *gomock.Controller) *MockHandlerBoardUsersService {
	mock := &MockHandlerBoardUsersService{ctrl: ctrl}
	mock.recorder = &MockHandlerBoardUsersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandlerBoardUsersService) EXPECT() *MockHandlerBoardUsersServiceMockRecorder {
	return m.recorder
}

// CreateBoardUsers mocks base method
func (m *MockHandlerBoardUsersService) CreateBoardUsers(boardUsersID, userID, boardID customType.StringUUID) (*models.BoardUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBoardUsers", boardUsersID, userID, boardID)
	ret0, _ := ret[0].(*models.BoardUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBoardUsers indicates an expected call of CreateBoardUsers
func (mr *MockHandlerBoardUsersServiceMockRecorder) CreateBoardUsers(boardUsersID, userID, boardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBoardUsers", reflect.TypeOf((*MockHandlerBoardUsersService)(nil).CreateBoardUsers), boardUsersID, userID, boardID)
}

// FindBoardUsersByIDs mocks base method
func (m *MockHandlerBoardUsersService) FindBoardUsersByIDs(userID, boardID customType.StringUUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBoardUsersByIDs", userID, boardID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBoardUsersByIDs indicates an expected call of FindBoardUsersByIDs
func (mr *MockHandlerBoardUsersServiceMockRecorder) FindBoardUsersByIDs(userID, boardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBoardUsersByIDs", reflect.TypeOf((*MockHandlerBoardUsersService)(nil).FindBoardUsersByIDs), userID, boardID)
}

// UpdateBoardUsers mocks base method
func (m *MockHandlerBoardUsersService) UpdateBoardUsers(userID, boardID, id customType.StringUUID) (*models.BoardUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBoardUsers", userID, boardID, id)
	ret0, _ := ret[0].(*models.BoardUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBoardUsers indicates an expected call of UpdateBoardUsers
func (mr *MockHandlerBoardUsersServiceMockRecorder) UpdateBoardUsers(userID, boardID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBoardUsers", reflect.TypeOf((*MockHandlerBoardUsersService)(nil).UpdateBoardUsers), userID, boardID, id)
}

// DeleteBoardUsers mocks base method
func (m *MockHandlerBoardUsersService) DeleteBoardUsers(id customType.StringUUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBoardUsers", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBoardUsers indicates an expected call of DeleteBoardUsers
func (mr *MockHandlerBoardUsersServiceMockRecorder) DeleteBoardUsers(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBoardUsers", reflect.TypeOf((*MockHandlerBoardUsersService)(nil).DeleteBoardUsers), id)
}

// DeleteBoardUsersByIDs mocks base method
func (m *MockHandlerBoardUsersService) DeleteBoardUsersByIDs(userID, boardID customType.StringUUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBoardUsersByIDs", userID, boardID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBoardUsersByIDs indicates an expected call of DeleteBoardUsersByIDs
func (mr *MockHandlerBoardUsersServiceMockRecorder) DeleteBoardUsersByIDs(userID, boardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBoardUsersByIDs", reflect.TypeOf((*MockHandlerBoardUsersService)(nil).DeleteBoardUsersByIDs), userID, boardID)
}

// FetchBoardUsersByUserID mocks base method
func (m *MockHandlerBoardUsersService) FetchBoardUsersByUserID(userID customType.StringUUID) ([]models.BoardUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchBoardUsersByUserID", userID)
	ret0, _ := ret[0].([]models.BoardUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBoardUsersByUserID indicates an expected call of FetchBoardUsersByUserID
func (mr *MockHandlerBoardUsersServiceMockRecorder) FetchBoardUsersByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchBoardUsersByUserID", reflect.TypeOf((*MockHandlerBoardUsersService)(nil).FetchBoardUsersByUserID), userID)
}

// FetchBoardUsersByBoardID mocks base method
func (m *MockHandlerBoardUsersService) FetchBoardUsersByBoardID(boardID customType.StringUUID) ([]models.BoardUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchBoardUsersByBoardID", boardID)
	ret0, _ := ret[0].([]models.BoardUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBoardUsersByBoardID indicates an expected call of FetchBoardUsersByBoardID
func (mr *MockHandlerBoardUsersServiceMockRecorder) FetchBoardUsersByBoardID(boardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchBoardUsersByBoardID", reflect.TypeOf((*MockHandlerBoardUsersService)(nil).FetchBoardUsersByBoardID), boardID)
}
