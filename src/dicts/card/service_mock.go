// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package card is a generated GoMock package.
package card

import (
	customType "2019_2_Shtoby_shto/src/customType"
	models "2019_2_Shtoby_shto/src/dicts/models"
	bufio "bufio"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHandlerCardService is a mock of HandlerCardService interface
type MockHandlerCardService struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerCardServiceMockRecorder
}

// MockHandlerCardServiceMockRecorder is the mock recorder for MockHandlerCardService
type MockHandlerCardServiceMockRecorder struct {
	mock *MockHandlerCardService
}

// NewMockHandlerCardService creates a new mock instance
func NewMockHandlerCardService(ctrl *gomock.Controller) *MockHandlerCardService {
	mock := &MockHandlerCardService{ctrl: ctrl}
	mock.recorder = &MockHandlerCardServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandlerCardService) EXPECT() *MockHandlerCardServiceMockRecorder {
	return m.recorder
}

// FindCardByID mocks base method
func (m *MockHandlerCardService) FindCardByID(id customType.StringUUID) (*models.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCardByID", id)
	ret0, _ := ret[0].(*models.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCardByID indicates an expected call of FindCardByID
func (mr *MockHandlerCardServiceMockRecorder) FindCardByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCardByID", reflect.TypeOf((*MockHandlerCardService)(nil).FindCardByID), id)
}

// FetchCardsByIDs mocks base method
func (m *MockHandlerCardService) FetchCardsByIDs(ids []string) ([]models.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCardsByIDs", ids)
	ret0, _ := ret[0].([]models.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCardsByIDs indicates an expected call of FetchCardsByIDs
func (mr *MockHandlerCardServiceMockRecorder) FetchCardsByIDs(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCardsByIDs", reflect.TypeOf((*MockHandlerCardService)(nil).FetchCardsByIDs), ids)
}

// FetchCardsByCardGroupIDs mocks base method
func (m *MockHandlerCardService) FetchCardsByCardGroupIDs(cardGroupIDs []string) ([]models.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCardsByCardGroupIDs", cardGroupIDs)
	ret0, _ := ret[0].([]models.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCardsByCardGroupIDs indicates an expected call of FetchCardsByCardGroupIDs
func (mr *MockHandlerCardServiceMockRecorder) FetchCardsByCardGroupIDs(cardGroupIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCardsByCardGroupIDs", reflect.TypeOf((*MockHandlerCardService)(nil).FetchCardsByCardGroupIDs), cardGroupIDs)
}

// CreateCard mocks base method
func (m *MockHandlerCardService) CreateCard(data []byte) (*models.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", data)
	ret0, _ := ret[0].(*models.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCard indicates an expected call of CreateCard
func (mr *MockHandlerCardServiceMockRecorder) CreateCard(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockHandlerCardService)(nil).CreateCard), data)
}

// UpdateCard mocks base method
func (m *MockHandlerCardService) UpdateCard(data []byte, id customType.StringUUID) (*models.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCard", data, id)
	ret0, _ := ret[0].(*models.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCard indicates an expected call of UpdateCard
func (mr *MockHandlerCardServiceMockRecorder) UpdateCard(data, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCard", reflect.TypeOf((*MockHandlerCardService)(nil).UpdateCard), data, id)
}

// DownloadFileToCard mocks base method
func (m *MockHandlerCardService) DownloadFileToCard(file *bufio.Reader, cardID customType.StringUUID) (*models.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFileToCard", file, cardID)
	ret0, _ := ret[0].(*models.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFileToCard indicates an expected call of DownloadFileToCard
func (mr *MockHandlerCardServiceMockRecorder) DownloadFileToCard(file, cardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFileToCard", reflect.TypeOf((*MockHandlerCardService)(nil).DownloadFileToCard), file, cardID)
}

// GetCardFile mocks base method
func (m *MockHandlerCardService) GetCardFile(cardID customType.StringUUID) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardFile", cardID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardFile indicates an expected call of GetCardFile
func (mr *MockHandlerCardServiceMockRecorder) GetCardFile(cardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardFile", reflect.TypeOf((*MockHandlerCardService)(nil).GetCardFile), cardID)
}

// DeleteCard mocks base method
func (m *MockHandlerCardService) DeleteCard(id customType.StringUUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCard", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCard indicates an expected call of DeleteCard
func (mr *MockHandlerCardServiceMockRecorder) DeleteCard(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCard", reflect.TypeOf((*MockHandlerCardService)(nil).DeleteCard), id)
}

// FetchCards mocks base method
func (m *MockHandlerCardService) FetchCards(limit, offset int) ([]models.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCards", limit, offset)
	ret0, _ := ret[0].([]models.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCards indicates an expected call of FetchCards
func (mr *MockHandlerCardServiceMockRecorder) FetchCards(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCards", reflect.TypeOf((*MockHandlerCardService)(nil).FetchCards), limit, offset)
}

// FillLookupFields mocks base method
func (m *MockHandlerCardService) FillLookupFields(card *models.Card, comments []models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FillLookupFields", card, comments)
	ret0, _ := ret[0].(error)
	return ret0
}

// FillLookupFields indicates an expected call of FillLookupFields
func (mr *MockHandlerCardServiceMockRecorder) FillLookupFields(card, comments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FillLookupFields", reflect.TypeOf((*MockHandlerCardService)(nil).FillLookupFields), card, comments)
}
