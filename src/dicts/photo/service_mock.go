// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package photo is a generated GoMock package.
package photo

import (
	customType "2019_2_Shtoby_shto/src/customType"
	models "2019_2_Shtoby_shto/src/dicts/models"
	bufio "bufio"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHandlerPhotoService is a mock of HandlerPhotoService interface
type MockHandlerPhotoService struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerPhotoServiceMockRecorder
}

// MockHandlerPhotoServiceMockRecorder is the mock recorder for MockHandlerPhotoService
type MockHandlerPhotoServiceMockRecorder struct {
	mock *MockHandlerPhotoService
}

// NewMockHandlerPhotoService creates a new mock instance
func NewMockHandlerPhotoService(ctrl *gomock.Controller) *MockHandlerPhotoService {
	mock := &MockHandlerPhotoService{ctrl: ctrl}
	mock.recorder = &MockHandlerPhotoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandlerPhotoService) EXPECT() *MockHandlerPhotoServiceMockRecorder {
	return m.recorder
}

// DownloadPhoto mocks base method
func (m *MockHandlerPhotoService) DownloadPhoto(photo *bufio.Reader) (*models.Photo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadPhoto", photo)
	ret0, _ := ret[0].(*models.Photo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadPhoto indicates an expected call of DownloadPhoto
func (mr *MockHandlerPhotoServiceMockRecorder) DownloadPhoto(photo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadPhoto", reflect.TypeOf((*MockHandlerPhotoService)(nil).DownloadPhoto), photo)
}

// GetPhotoByUser mocks base method
func (m *MockHandlerPhotoService) GetPhotoByUser(photoID customType.StringUUID) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhotoByUser", photoID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhotoByUser indicates an expected call of GetPhotoByUser
func (mr *MockHandlerPhotoServiceMockRecorder) GetPhotoByUser(photoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhotoByUser", reflect.TypeOf((*MockHandlerPhotoService)(nil).GetPhotoByUser), photoID)
}
