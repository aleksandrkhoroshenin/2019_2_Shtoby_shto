// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package board is a generated GoMock package.
package board

import (
	customType "2019_2_Shtoby_shto/src/customType"
	models "2019_2_Shtoby_shto/src/dicts/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHandlerBoardService is a mock of HandlerBoardService interface
type MockHandlerBoardService struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerBoardServiceMockRecorder
}

// MockHandlerBoardServiceMockRecorder is the mock recorder for MockHandlerBoardService
type MockHandlerBoardServiceMockRecorder struct {
	mock *MockHandlerBoardService
}

// NewMockHandlerBoardService creates a new mock instance
func NewMockHandlerBoardService(ctrl *gomock.Controller) *MockHandlerBoardService {
	mock := &MockHandlerBoardService{ctrl: ctrl}
	mock.recorder = &MockHandlerBoardServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandlerBoardService) EXPECT() *MockHandlerBoardServiceMockRecorder {
	return m.recorder
}

// FindBoardByID mocks base method
func (m *MockHandlerBoardService) FindBoardByID(id customType.StringUUID) (*models.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBoardByID", id)
	ret0, _ := ret[0].(*models.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBoardByID indicates an expected call of FindBoardByID
func (mr *MockHandlerBoardServiceMockRecorder) FindBoardByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBoardByID", reflect.TypeOf((*MockHandlerBoardService)(nil).FindBoardByID), id)
}

// CreateBoard mocks base method
func (m *MockHandlerBoardService) CreateBoard(data []byte, boardUserID customType.StringUUID) (*models.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBoard", data, boardUserID)
	ret0, _ := ret[0].(*models.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBoard indicates an expected call of CreateBoard
func (mr *MockHandlerBoardServiceMockRecorder) CreateBoard(data, boardUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBoard", reflect.TypeOf((*MockHandlerBoardService)(nil).CreateBoard), data, boardUserID)
}

// UpdateBoard mocks base method
func (m *MockHandlerBoardService) UpdateBoard(data []byte, id customType.StringUUID) (*models.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBoard", data, id)
	ret0, _ := ret[0].(*models.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBoard indicates an expected call of UpdateBoard
func (mr *MockHandlerBoardServiceMockRecorder) UpdateBoard(data, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBoard", reflect.TypeOf((*MockHandlerBoardService)(nil).UpdateBoard), data, id)
}

// DeleteBoard mocks base method
func (m *MockHandlerBoardService) DeleteBoard(id customType.StringUUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBoard", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBoard indicates an expected call of DeleteBoard
func (mr *MockHandlerBoardServiceMockRecorder) DeleteBoard(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBoard", reflect.TypeOf((*MockHandlerBoardService)(nil).DeleteBoard), id)
}

// FetchBoards mocks base method
func (m *MockHandlerBoardService) FetchBoards(limit, offset int) ([]models.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchBoards", limit, offset)
	ret0, _ := ret[0].([]models.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBoards indicates an expected call of FetchBoards
func (mr *MockHandlerBoardServiceMockRecorder) FetchBoards(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchBoards", reflect.TypeOf((*MockHandlerBoardService)(nil).FetchBoards), limit, offset)
}

// FetchBoardsByIDs mocks base method
func (m *MockHandlerBoardService) FetchBoardsByIDs(boardsIDs []string) ([]models.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchBoardsByIDs", boardsIDs)
	ret0, _ := ret[0].([]models.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBoardsByIDs indicates an expected call of FetchBoardsByIDs
func (mr *MockHandlerBoardServiceMockRecorder) FetchBoardsByIDs(boardsIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchBoardsByIDs", reflect.TypeOf((*MockHandlerBoardService)(nil).FetchBoardsByIDs), boardsIDs)
}
